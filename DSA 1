Practical No. 1

Aim: General Python Program

A] Write Python Program to demonstrate the use of various Python Data Types and Structures.

CODE:


x= str("Hello World")
print(x)
print (type (x))
x= int(15)
print(x)
print (type (x))
x= float (15.5)
print(x)
print(type (x))
x = complex (4+1j)
print(x)
print (type (x))
x = list(("apple", "mango", "cherry")) 
print (x)
print (type (x)) 
x = tuple (("apple", "mango", "cherry"))
print(x) 
print (type (x))
x = range (6)
print(x)
print (type (x)) 
x = set(("apple", "mango", "cherry"))
print(x)
print (type (x)) 
Dict={'Name': 'Rutuja', 1:[1,2,3,4]}
print("Creating Dictionary: ")
print (Dict)
print (type (Dict))


B] Write Python Program to demonstrate OOP Concepts including Class, Objects, Inheritance and encapsulation.

a. Creating a class and object with class and instance attributes.


CODE:

class Dog:
    # Class attribute
    attr1 = "mammal"
    
    # Instance attribute
    def __init__(self, name):
        self.name = name

# Driver code
# Object instantiation
Rodger = Dog("Rodger")
Tommy = Dog("Tommy")

# Accessing class attributes
print("Rodger is a {}".format(Rodger.__class__.attr1))
print("Tommy is also a {}".format(Tommy.__class__.attr1))

# Accessing instance attributes
print("My name is {}".format(Rodger.name))
print("My name is {}".format(Tommy.name))



b. Creating Classes and objects with methods.

Code:

class Dog:
    # Class attribute
    attr1 = "mammal"
    
    # Instance attribute
    def __init__(self, name):
        self.name = name
    
    def speak(self):
        print("My name is {}".format(self.name))

# Driver code
# Object instantiation
Rodger = Dog("Rodger")
Tommy = Dog("Tommy")

# Accessing class methods
Rodger.speak()
Tommy.speak()



c. Inheritance in Python.

Code:

# Parent class
class Person(object):
    # __init__ is known as the constructor
    def __init__(self, name, idnumber):
        self.name = name
        self.idnumber = idnumber

    def display(self):
        print(self.name)
        print(self.idnumber)

    def details(self):
        print("My name is {}".format(self.name))
        print("IdNumber: {}".format(self.idnumber))

# Child class
class Employee(Person):
    def __init__(self, name, idnumber, salary, post):
        self.salary = salary
        self.post = post
        # Invoking the __init__ of the parent class
        Person.__init__(self, name, idnumber)
    
    def details(self):
        print("My name is {}".format(self.name))
        print("IdNumber: {}".format(self.idnumber))
        print("Post: {}".format(self.post))

# Creation of an object variable or an instance
a = Employee('Rahul', 886012, 200000, "Intern")

# Calling a function of the class Person using its instance
a.display()
a.details()



d. Python Polymorphism

Code:

class Bird:
    def intro (self):
        print ("There are many types of birds.")
    def flight (self):
        print("Most of the birds can fly but some cannot.")
class sparrow (Bird):
    def flight(self):
        print ("Sparrows can fly.")
class ostrich (Bird):
    def flight (self):
        print("Ostriches cannot fly.")
obj_bird = Bird()
obj_spr = sparrow()
obj_ost = ostrich()
obj_bird.intro()
obj_bird.flight()
obj_spr.intro ()
obj_spr.flight()
obj_ost.intro ()
obj_ost.flight()


e. Python Encapsulation.

Code:


class Base:
    def __init__(self):
        self.a = "GeeksforGeeks"
        self.__c = "GeeksforGeeks"

class Derived(Base):
    def __init__(self):
        Base.__init__(self)
        print("Calling private member of base class: ")
        # Accessing private member using name mangling
        print(self._Base__c)

obj1 = Base()
print(obj1.a)




C] Write Python Program to implement array and operations of arrays.

1. Printing Integer Values -

CODE:

from array import *
array1 = array('i', [10, 20, 30, 40, 50]) 
for x in array1:
    print(x)



2. Printing float values -

CODE:

from array import *
arrayName = array('f', [10.5, 20.1, 30.2])
for x in arrayName:
    print(x)



3. Print values by using index

CODE:

from array import *
array1 = array('i', [10, 20, 30, 40, 50])
print(array1[0])
print(array1[2])



4. Insert operation -

CODE:

 from array import *
array1 = array('i', [10, 20, 30, 40, 50])
array1.insert(1, 60)
for x in array1:
    print(x)



5. Remove operation -

CODE:

from array import *
array1 = array('i', [10, 20, 30, 40, 50])
array1.remove(40)
for x in array1:
    print(x)


6. Defining index by using value

CODE:

from array import *
array1 = array('i', [10, 20, 30, 40, 50])
print(array1.index(10))


7. Replacing the value by using index

CODE:
from array import *
array1 = array('i', [10, 20, 30, 40, 50])
array1[2] = 80
for x in array1:
    print(x)

