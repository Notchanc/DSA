Practical No.3

Aim = Stack And Queues

A] Write Python Program to implement stack and demonstrate push, pop and peek operations.

CODE:

stack = ["Rutuja", "Swarup", "Madhura"]
stack.append("Aniruddha")
stack.append("Pranav")
print(stack)
print(stack.pop())
print(stack)
print(stack.pop())
print(stack)
print("peek:",stack[-1])


B] Write Python Program to implement list based queues and demonstrate various operations on it.

CODE:

queue=[]
print(queue)
queue.append("Mary")
print(queue)
queue.append("John")
print(queue)
queue.append("Maria")
print(queue)
queue.pop(0)
print(queue)
queue.pop(0)
print(queue)
queue.pop(0)
print(queue)


C] Write Python Program to implement stack for Bracket-matching application

code:

def isBalanced(expr):
    stack = []

    for char in expr:
        if char in ["(", "{", "["]:
            # Push the element in the stack
            stack.append(char)
        else:
            # If current character is not opening
            # bracket, then it must be closing.
            if not stack:
                return False
            current_char = stack.pop()
            if current_char == '(':
                if char != ")":
                    return False
            if current_char == '{':
                if char != "}":
                    return False
            if current_char == '[':
                if char != "]":
                    return False

    # Check Empty Stack
    if stack:
        return False
    return True

# Driver Code
if __name__ == "__main__":
    expr = "{()}[]"

    # Function call
    print(isBalanced(expr))
